package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"gostarter/internals/delivery/http/graphql/generated"
	"gostarter/internals/delivery/http/graphql/models"
	"gostarter/internals/domain"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*domain.Account, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, pagination domain.Pagination) (*models.PaginatedAccounts, error) {
	ctx, span := r.Container.Tracer.Start(ctx, "QueryResolver.Accounts")
	defer span.End()

	accounts, err := r.ServiceDi.AccountService.ListAccounts(ctx, &pagination)
	if err != nil {
		return nil, err
	}

	return &models.PaginatedAccounts{
		Accounts: accounts,
		PageInfo: &models.PageInfo{
			Page:  pagination.Page,
			Size:  pagination.Size,
			Total: pagination.Total,
		},
	}, nil
}

// AccountByEmail is the resolver for the accountByEmail field.
func (r *queryResolver) AccountByEmail(ctx context.Context, email string) (*domain.Account, error) {
	ctx, span := r.Container.Tracer.Start(ctx, "QueryResolver.AccountByEmail")
	defer span.End()

	return r.ServiceDi.AccountService.GetAccountByEmail(ctx, email)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
